initSidebarItems({"enum":[["RuleCondition","A condition from a sampling rule."],["RuleType","Defines the type of dynamic rule, i.e. to which type of events it will be applied and how."],["SamplingResult","The result of a sampling operation returned by [`TraceContext::should_keep`]."]],"fn":[["get_matching_event_rule","Returns the first event rule that matches the event."],["pseudo_random_from_uuid","Generates a pseudo random number by seeding the generator with the given id."],["rule_type_for_event","Returns the type of rule that applies to a particular event."]],"struct":[["AndCondition","And condition combinator."],["CustomCondition","Condition that cover custom operators which need special handling and have a custom implementation for each case."],["EqCondOptions","A condition that checks the values using the equality operator."],["EqCondition","A condition that checks for equality"],["GlobCondition","A condition that uses glob matching."],["GtCondition",""],["GteCondition",""],["LtCondition",""],["LteCondition",""],["NotCondition","Not condition combinator."],["OrCondition","Or condition combinator."],["RuleId","Sampling rule Id"],["SamplingConfig","Represents the dynamic sampling configuration available to a project."],["SamplingRule","A sampling rule as it is deserialized from the project configuration."],["TraceContext","TraceContext created by the first Sentry SDK in the call chain."],["TraceUserContext","The User related information in the trace context"]]});